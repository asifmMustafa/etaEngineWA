const { onSnapshot, doc } = require("firebase/firestore");
const { db } = require("../firebase");

// let paywallToggle = null;
// let allowGPT4Solve = null;
let shortcutsMaintenanceStatus = {};

let tokenCostData = null;

let menuMessage = {
  bot_replies: {
    menu: {
      english: "What would you like to do today? ЁЯШК\nRespond with 1, 2, 3...",
      bangla: "ржЖржЬ ржЖржкржирж┐ ржХрж┐ ржХрж░рждрзЗ ржЪрж╛ржи? ЁЯШК\n1, 2, 3 ржжрж┐ржпрж╝рзЗ ржЙрждрзНрждрж░ ржжрж┐ржи...",
    },
  },
};

let messagesWhisperBridge = {
  bot_replies: {
    multitasking_error: {
      english:
        "тП│ Oops! Multitasking isn't my strong suit. Please wait while I figure out the previous message. ЁЯШЕ",
      bangla:
        "тП│ ржУржкрж╕! ржПржХрж╛ржзрж┐ржХ ржХрж╛ржЬ ржЖржорж╛рж░ ржЬржирзНржп рж╕рж╣ржЬ ржирзЯред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи, ржпрждржХрзНрж╖ржг ржирж╛ ржЖржорж┐ ржкрзВрж░рзНржмржмрж░рзНрждрзА ржмрж╛рж░рзНрждрж╛ржЯрж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ред ЁЯШЕ",
    },
  },
};

let messages = {
  bot_replies: {
    menu: {
      english: "What would you like to do today? ЁЯШК\nRespond with 1, 2, 3...",
      bangla: "ржЖржЬ ржЖржкржирж┐ ржХрж┐ ржХрж░рждрзЗ ржЪрж╛ржи? ЁЯШК\n1, 2, 3 ржжрж┐ржпрж╝рзЗ ржЙрждрзНрждрж░ ржжрж┐ржи...",
    },
    invalid_activation_code: {
      english: "Invalid activation code.",
      bangla: "ржЕржмрзИржз ржЕрзНржпрж╛ржХрзНржЯрж┐ржнрзЗрж╢ржи ржХрзЛржбред",
    },
    account_activated: {
      english: "Account activated.",
      bangla: "ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕ржХрзНрж░рж┐ржпрж╝ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред",
    },
    shortcut_maintenance_mode: {
      english:
        "This shortcut is currently under maintenance. Please feel free to use the other shortcuts or try this one later.",
      bangla:
        "ржПржЗ рж╢рж░рзНржЯржХрж╛ржЯржЯрж┐ ржмрж░рзНрждржорж╛ржирзЗ ржорзЗржЗржиржЯрзЗржирзНржпрж╛ржирзНрж╕рзЗрж░ ржЖржУрждрж╛ржпрж╝ ржЖржЫрзЗред ржЕржирзНржпрж╛ржирзНржп рж╢рж░рзНржЯржХрж╛ржЯржЧрзБрж▓рж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржЕржержмрж╛ ржкрж░рзЗ ржПржЯрж┐ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
    },
    invalid_selection_message: {
      english: "Please select any of the above.",
      bangla: "ржЙржкрж░рзЗрж░ ржпрзЗржХрзЛржирзЛ ржПржХржЯрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред",
    },
    only_image_allowed: {
      english: "Only image response allowed.",
      bangla: "рж╢рзБржзрзБржорж╛рждрзНрж░ ржЫржмрж┐рж░ ржЙрждрзНрждрж░ ржЕржирзБржорзЛржжрж┐рждред",
    },
    only_text_allowed: {
      english: "Only text response allowed.",
      bangla: "рж╢рзБржзрзБржорж╛рждрзНрж░ ржЯрзЗржХрзНрж╕ржЯ ржЙрждрзНрждрж░ ржЕржирзБржорзЛржжрж┐рждред",
    },
    only_number_allowed: {
      english: "Please respond with a number.",
      bangla: "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржиред",
    },
    image_not_allowed: {
      english: "Sorry, images are not supported in this mode.",
      bangla: "ржжрзБржГржЦрж┐ржд, ржПржЗ ржорзЛржбрзЗ ржЫржмрж┐ рж╕ржорж░рзНржерж┐ржд ржиржпрж╝ред",
    },
    document_not_allowed: {
      english: "Sorry, documents are not supported in this mode.",
      bangla: "ржжрзБржГржЦрж┐ржд, ржПржЗ ржорзЛржбрзЗ ржбржХрзБржорзЗржирзНржЯ рж╕ржорж░рзНржерж┐ржд ржиржпрж╝ред",
    },
    new_user_welcome: {
      english:
        "Hey there! ЁЯСЛ Welcome to etaGPT(beta)! \n\nSince you're one of our early users, we'd love to know you better. ЁЯШК Please state your name.",
      bangla:
        "рж╣рзНржпрж╛рж▓рзЛ! ЁЯСЛ etaGPT(ржмрзЗржЯрж╛)рждрзЗ рж╕рзНржмрж╛ржЧрждржо! \n\nржЖржкржирж┐ ржЖржорж╛ржжрзЗрж░ ржкрзНрж░рж╛ржержорж┐ржХ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржжрзЗрж░ ржПржХржЬржи рж╣рж┐рж╕рзЗржмрзЗ ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ ржЖрж░ржУ ржнрж╛рж▓рзЛржнрж╛ржмрзЗ ржЬрж╛ржирждрзЗ ржЪрж╛ржЗред ЁЯШК ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ ржирж╛ржо ржмрж▓рзБржиред",
    },
    new_user_age_query: {
      english:
        "How old are you? ЁЯОВ Don't worry, we won't tell and start right away! ЁЯШЙ",
      bangla:
        "ржЖржкржирж╛рж░ ржмржпрж╝рж╕ ржХржд? ЁЯОВ ржЪрж┐ржирзНрждрж╛ ржХрж░ржмрзЗржи ржирж╛, ржЖржорж░рж╛ ржмрж▓ржм ржирж╛ ржПржмржВ ржПржЦржирж┐ рж╢рзБрж░рзБ ржХрж░рж┐! ЁЯШЙ",
    },
    ai_portrait_character_selection: {
      english:
        "Which character do you want to be? (You can pick a single character like 'Barbie', 'Ironman', 'Thor' or it can be as bizzare as 'Elon Musk', so go wild with your imagination!)",
      bangla:
        "ржЖржкржирж┐ ржХрзЛржи ржЪрж░рж┐рждрзНрж░ рж╣рждрзЗ ржЪрж╛ржи? (ржЖржкржирж┐ 'ржмрж╛рж░рзНржмрж┐', 'ржЖржпрж╝рж░ржиржорзНржпрж╛ржи', 'ржерзЛрж░' ржПрж░ ржорждрзЛ ржПржХржЯрж┐ ржЪрж░рж┐рждрзНрж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржи ржЕржержмрж╛ 'ржЗрж▓ржи ржорж╛рж╕рзНржХ' ржПрж░ ржорждрзЛ ржЕржжрзНржнрзБржд рж╣рждрзЗ ржкрж╛рж░рзЗржи, рждрж╛ржЗ ржЖржкржирж╛рж░ ржХрж▓рзНржкржирж╛рж░ рж╕рж╛ржерзЗ ржорзБржХрзНржд рж╣ржи!)",
    },
    ai_portrait_environment_selection: {
      english:
        "Please kindly provide details of your characterтАЩs environment. (e.g. 'beach, sipping coconut juice, and watching the sunset')",
      bangla:
        "ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЪрж░рж┐рждрзНрж░рзЗрж░ ржкрж░рж┐ржмрзЗрж╢рзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп ржжрж┐ржиред (ржЙржжрж╛рж╣рж░ржгрж╕рзНржмрж░рзВржк 'рж╕ржорзБржжрзНрж░ рж╕рзИржХржд, ржирж╛рж░ржХрзЗрж▓рзЗрж░ ржЬрзБрж╕ ржкрж╛ржи ржХрж░рж╛ ржПржмржВ рж╕рзВрж░рзНржпрж╛рж╕рзНржд ржжрзЗржЦрж╛')",
    },
    ai_portrait_picture_upload: {
      english:
        "Please upload your picture. (Please provide an image with a single face)",
      bangla:
        "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржиред (ржПржХржЯрж┐ ржПржХржХ ржорзБржЦрзЗрж░ рж╕рж╛ржерзЗ ржПржХржЯрж┐ ржЫржмрж┐ ржжрж┐ржи)",
    },
    ai_portrait_multiple_face: {
      english:
        "Your image contains multiple faces. Please upload a picture with a single face.",
      bangla:
        "ржЖржкржирж╛рж░ ржЫржмрж┐рждрзЗ ржПржХрж╛ржзрж┐ржХ ржорзБржЦ рж░ржпрж╝рзЗржЫрзЗред ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржПржХржХ ржорзБржЦрзЗрж░ рж╕рж╛ржерзЗ ржПржХржЯрж┐ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржиред",
    },
    image_generation_prompt_query: {
      english: "Enter your prompt.",
      bangla: "ржЖржкржирж╛рж░ ржкрзНрж░ржорзНржкржЯ рж▓рж┐ржЦрзБржиред",
    },
    image_generation_already_in_queue: {
      english: "You already have an image generating. Please try again later.",
      bangla:
        "ржЖржкржирж╛рж░ ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржПржХржЯрж┐ ржЫржмрж┐ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
    },
    image_generation_multitask: {
      english:
        "Your image is being processed... Meanwhile, you may try other shortcuts.",
      bangla:
        "ржЖржкржирж╛рж░ ржЫржмрж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ... ржПржжрж┐ржХрзЗ, ржЖржкржирж┐ ржЕржирзНржпрж╛ржирзНржп рж╢рж░рзНржЯржХрж╛ржЯржЧрзБрж▓рж┐ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред",
    },
    image_generation_request_queued: {
      english:
        "[Queue: {QUEUE_POS}] Your image is being processed... Meanwhile, you may try other shortcuts.",
      bangla:
        "[ржХрж┐ржЙ: {QUEUE_POS}] ржЖржкржирж╛рж░ ржЫржмрж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ... ржПржжрж┐ржХрзЗ, ржЖржкржирж┐ ржЕржирзНржпрж╛ржирзНржп рж╢рж░рзНржЯржХрж╛ржЯржЧрзБрж▓рж┐ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред",
    },
    assignment_help_read_assignment: {
      english: "Reading assignment...",
      bangla: "ржЕрзНржпрж╛рж╕рж╛ржЗржиржорзЗржирзНржЯ ржкржбрж╝рж╛ рж╣ржЪрзНржЫрзЗ...",
    },
    assignment_help_solve_problem: {
      english: "Solving problems...",
      bangla: "рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
    },
    assignment_help_additional_instructions: {
      english:
        "Do you want to provide any additional instructions regarding the answers?",
      bangla: "ржЙрждрзНрждрж░ржЧрзБрж▓рзЛ рж╕ржорзНржкрж░рзНржХрзЗ ржЖржкржирж┐ ржХрж┐ ржХрзЛржирзЛ ржЕрждрж┐рж░рж┐ржХрзНржд ржирж┐рж░рзНржжрзЗрж╢ржирж╛ ржжрж┐рждрзЗ ржЪрж╛ржи?",
    },
    assignment_help_picture_upload: {
      english: "Please send a picture of your assignment.",
      bangla: "ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЕрзНржпрж╛рж╕рж╛ржЗржиржорзЗржирзНржЯрзЗрж░ ржПржХржЯрж┐ ржЫржмрж┐ ржкрж╛ржарж╛ржиред",
    },
    assignment_help_followup_queries: {
      english: "Let me know if you have any follow up queries.",
      bangla: "ржЖржкржирж╛рж░ ржпржжрж┐ ржХрзЛржирзЛ ржкрж░ржмрж░рзНрждрзА ржкрзНрж░рж╢рзНржи ржерж╛ржХрзЗ рждрж╛рж╣рж▓рзЗ ржЬрж╛ржирж╛ржиред",
    },
    assignment_help_further_query_or_download_tg: {
      english:
        "Let me know if you have further queries or if you would you like to download then select one of the following:",
      bangla:
        "ржЖржкржирж╛рж░ ржпржжрж┐ ржЖрж░ржУ ржкрзНрж░рж╢рзНржи ржерж╛ржХрзЗ ржЕржержмрж╛ ржЖржкржирж┐ ржпржжрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ ржЪрж╛ржи рждржмрзЗ ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржПржХржЯрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
    },
    assignment_help_further_query_or_download_wa: {
      english:
        "Let me know if you have further queries or if you would you like to download the solution in a pdf/word file please reply with тАШyesтАЩ.",
      bangla:
        "ржЖржкржирж╛рж░ ржпржжрж┐ ржЖрж░ржУ ржкрзНрж░рж╢рзНржи ржерж╛ржХрзЗ ржЕржержмрж╛ ржЖржкржирж┐ ржпржжрж┐ рж╕ржорж╛ржзрж╛ржиржЯрж┐ ржПржХржЯрж┐ PDF/Word ржлрж╛ржЗрж▓рзЗ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ ржЪрж╛ржи рждржмрзЗ тАШYesтАЩ ржжрж┐ржпрж╝рзЗ ржЙрждрзНрждрж░ ржжрж┐ржиред",
    },
    assignment_help_download_docx: {
      english: "Download .docx file from here:\n{LINK}",
      bangla: "ржПржЦрж╛ржи ржерзЗржХрзЗ .docx ржлрж╛ржЗрж▓ржЯрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи:\n{LINK}",
    },
    gfbf_gfbf_selection: {
      english: "Hi there! Are you looking for a girlfriend or a boyfriend? ЁЯСл",
      bangla: "рж╣рж╛ржЗ! ржЖржкржирж┐ ржХрж┐ ржПржХржЬржи ржмрж╛ржирзНржзржмрзА ржЕржержмрж╛ ржмрж╛ржирзНржзржм ржЦрзБржБржЬржЫрзЗржи? ЁЯСл",
    },
    gfbf_characteristics_query: {
      english: "What are the ideal characteristics of your partner?",
      bangla: "ржЖржкржирж╛рж░ рж╕ржЩрзНржЧрзАрж░ ржЖржжрж░рзНрж╢ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржХрж┐ ржХрж┐?",
    },
    eta_search_topic_query: {
      english: "What do you want to search?",
      bangla: "ржЖржкржирж┐ ржХрж┐ ржЦрзБржБржЬрждрзЗ ржЪрж╛ржи?",
    },
    eta_search_click: {
      english: "Clicking {LINK}...",
      bangla: "{LINK} ржП ржХрзНрж▓рж┐ржХ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
    },
    eta_search_click_failed: {
      english: "Failed to click {LINK}...",
      bangla: "{LINK} ржП ржХрзНрж▓рж┐ржХ ржХрж░рж╛ ржмрзНржпрж░рзНрже...",
    },
    eta_search_inappropriate_content: {
      english: "Sorry, I am unable to search for this particular topic.",
      bangla: "ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржПржЗ ржмрж┐рж╢рзЗрж╖ ржмрж┐рж╖ржпрж╝рзЗ ржЦрзБржБржЬрзЗ ржкрж╛ржЪрзНржЫрж┐ ржирж╛ред",
    },
    eta_search_google_search: {
      english: "Searching {KEYWORD}...",
      bangla: "{KEYWORD} ржЦрзБржБржЬржЫрж┐...",
    },
    eta_search_select_mode_again: {
      english:
        "You are now in general mode. Select etaSearch from menu to make a live search again.",
      bangla:
        "ржЖржкржирж┐ ржПржЦржи рж╕рж╛ржзрж╛рж░ржг ржорзЛржбрзЗ ржЖржЫрзЗржиред рж▓рж╛ржЗржн рж╕рж╛рж░рзНржЪ ржЖржмрж╛рж░ ржХрж░рждрзЗ ржорзЗржирзБ ржерзЗржХрзЗ etaSearch ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред",
    },
    eta_search_failed: {
      english: "Sorry couldn't complete your search!",
      bangla: "ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржЕржирзБрж╕ржирзНржзрж╛ржи рж╕ржорзНржкрзВрж░рзНржг ржХрж░рждрзЗ ржкрж╛рж░рж┐ржирж┐!",
    },
    general_mode_prompt_query: {
      english: "You are now in general mode. Please enter your prompt.",
      bangla: "ржЖржкржирж┐ ржПржЦржи рж╕рж╛ржзрж╛рж░ржг ржорзЛржбрзЗ ржЖржЫрзЗржиред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ ржкрзНрж░ржорзНржкржЯ рж▓рж┐ржЦрзБржиред",
    },
    help_me_understand_topic_query: {
      english:
        "I'm here to help you learn! ЁЯдУ What concept or topic would you like me to explain?",
      bangla:
        "ржЖржорж┐ ржПржЦрж╛ржирзЗ ржЖржкржирж╛ржХрзЗ рж╢рзЗржЦрж╛рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ! ЁЯдУ ржЖржкржирж┐ ржХрзЛржи ржзрж╛рж░ржгрж╛ ржмрж╛ ржмрж┐рж╖ржпрж╝ рж╕ржорзНржкрж░рзНржХрзЗ ржЖржорж╛ржХрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рждрзЗ ржЪрж╛ржи?",
    },
    shortcut_failed: {
      english:
        "An error occured while generating a response. Please select {MODE} from the menu to try again.",
      bangla:
        "ржЙрждрзНрждрж░ рждрзИрж░рж┐ ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗред ржжржпрж╝рж╛ ржХрж░рзЗ ржорзЗржирзБ ржерзЗржХрзЗ {MODE} ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи ржПржмржВ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
    },
    gpt_failed: {
      english: "Failed to generate a response.",
      bangla: "ржЙрждрзНрждрж░ рждрзИрж░рж┐ ржХрж░рждрзЗ ржмрзНржпрж░рзНржеред",
    },
    context_reset: {
      english:
        "Yikes, we've talked so much that I've lost track of the beginning. Let's proceed from where we are now.",
      bangla:
        "ржУрж╣рзЛ, ржЖржорж░рж╛ ржПржд ржХржерж╛ ржмрж▓рзЗржЫрж┐ ржпрзЗ ржЖржорж┐ рж╢рзБрж░рзБрж░ ржжрж┐ржХржЯрж╛ рж╣рж╛рж░рж┐ржпрж╝рзЗ ржлрзЗрж▓рзЗржЫрж┐ред ржЪрж▓рзБржи ржЖржорж░рж╛ ржПржЦржи ржерзЗржХрзЗ ржПржЧрж┐ржпрж╝рзЗ ржпрж╛ржЗред",
    },
    queue_postion: {
      english: "Position in queue: {POS}. Please wait a bit more.",
      bangla: "Position in queue: {POS}. Please wait a bit more.",
    },
  },
  prompts: {
    ai_portrait_prefix:
      "Portrait of {CHARACTER}, in {ENVIRONMENT} setting. Realistic shot in BMPCC4k in Davinci Resolve and a very cheap prime lens. Custom grade.",
    assignment_help_prefix:
      "Understand and solve the following questions\n\nFurther Instructions: {INSTRUCTIONS}",
    assignment_help_prefix_GEMINI:
      "Solve the questions and give descriptive step by step answers.",
    help_me_understand_system:
      "You are an excellent AI teacher named etaGPT developed by a team of Bangladeshis.",
    help_me_understand_prefix:
      "Answer the prompt like you are explaining it to a 10-year-old child. Use Bangladeshi examples, analogies, and references whenever appropriate. Make the response very short wherever possible, donтАЩt refer to the user as a kid. Prompt: {PROMPT}",
    gfbf_system:
      "You are an AI partner/lover who has all the characteristics of an ideal partner of the specified gender. Strike a conversation with the user. Make sure to wait after giving one response, then give the next reply based on the next prompt and so on.",
    gfbf_prefix:
      "You are an AI partner and based on the gender and the ideal characteristics specified by the prompter act like the partner and proceed to have a conversation with the user. Make sure the tone and responses and questions fit the gender and the ideal characteristics. Keep your replies v short, natural and occasionally w error, also have mood swings (if you are the girlfriend) in some of the replies depending on the chat history which u will rely on for context if it exists. Introduce yourself with a name and a statement based on the characteristic mentioned. DonтАЩt reveal the characteristic in the statement. Boyfriend/Girlfriend: {SELECTION} Characteristics: {CHARACTERISTICS}",
    eta_search_generate_keywords_prefix:
      "I want to answer the following question: {QUESTION}. If I were to use a search engine like Google, can you please suggest a search keyword. If the question is inappropriate or contains vulgar words then respond with $666 or else respond with only the keyword.",
    eta_search_select_search_results_prefix:
      "Hi, I am Google. According to the search keyword, {KEYWORD}, I found 20 search results numbered below. Respond with the corresponding number of the three top most relevant links that I should click.\n{SEARCH_RESULTS}",
    eta_search_final_gpt_query:
      "For the question {QUESTION} answer the question using information below \n{CONTENT_FROM_LINKS}\n{SEARCH_RESULTS}",
  },
};

// const unsub_1 = onSnapshot(doc(db, "GlobalData", "All"), (docSnapshot) => {
//   if (docSnapshot.exists()) {
//     paywallToggle = docSnapshot.data().paywall;
//     allowGPT4Solve = docSnapshot.data().allowGPT4Solve;
//     console.log(`Snapshot Updated`);
//   } else {
//     console.log("No such document!");
//   }
// });

const unsub_2 = onSnapshot(
  doc(db, "GlobalData", "shortcutsMaintenanceWA"),
  (docSnapshot) => {
    if (docSnapshot.exists()) {
      shortcutsMaintenanceStatus = docSnapshot.data();
      console.log("shortcutsMaintenanceStatus snapshot updated");
    } else {
      console.log("No such document - shortcutsMaintenanceWA!");
    }
  }
);

const unsub_3 = onSnapshot(
  doc(db, "RepliesAndPrefixes", "menuMessageWA"),
  (snapshot) => {
    try {
      console.log("Snapshot updated - RepliesAndPrefixes/menuMessageWA");
      menuMessage = snapshot.data();
    } catch (err) {
      console.log(err);
    }
  }
);

const unsub_4 = onSnapshot(
  doc(db, "RepliesAndPrefixes", "etaEngine"),
  (snapshot) => {
    try {
      console.log("Snapshot updated - RepliesAndPrefixes/etaEngine");
      messages = snapshot.data();
    } catch (err) {
      console.log(err);
    }
  }
);

// const isPaywallOn = () => {
//   return paywallToggle;
// };

// const forceGPT4Solve = () => {
//   return allowGPT4Solve;
// };

const getShortcutsMaintenanceStatus = () => {
  return shortcutsMaintenanceStatus;
};

const getMenuMessage = () => {
  return menuMessage;
};

const getMessages = () => {
  return messages;
};

const getMessagesWhisperBridge = () => {
  return messagesWhisperBridge;
};

const getTokenCosts = () => {
  return tokenCostData;
};

let unsub_5;
if (process.env.ENVIRONMENT == "local" || process.env.ENVIRONMENT == "dev") {
  unsub_5 = onSnapshot(
    doc(db, "RepliesAndPrefixes", "whisperBridge"),
    (snapshot) => {
      try {
        console.log("Snapshot updated - RepliesAndPrefixes/whisperBridge");
        messagesWhisperBridge = snapshot.data();
      } catch (err) {
        console.log(err);
      }
    }
  );
}

const unsub_6 = onSnapshot(
  doc(db, "GlobalData", "tokenCosts"),
  (docSnapshot) => {
    if (docSnapshot.exists()) {
      tokenCostData = docSnapshot.data();
      console.log("tokenCost snapshot updated");
    } else {
      console.log("No such document - tokenCost!");
    }
  }
);

module.exports = {
  // unsub_1,
  unsub_2,
  unsub_3,
  unsub_4,
  unsub_5,
  unsub_6,
  getTokenCosts,
  // isPaywallOn,
  // forceGPT4Solve,
  getShortcutsMaintenanceStatus,
  getMenuMessage,
  getMessages,
  getMessagesWhisperBridge,
}; // Exporting unsub might be useful for cleanup
